/* * Playdom, Inc. (c)2013 All Rights Reserved */ package com.playdom.gas.parsing  {	/**	 * Tokenizes an XML script.  	 * 	 * @author Rob Harris	 */	public class XMLScriptTokenizer extends ScriptTokenizer	{		/** The converted XML data */		private var xml:XML;				/**		 * The script format type.		 */		override public function get formatType():String		{			return "XML";		}				/**		 * The source string to be parsed.		 */		override public function set source(txt:String):void		{			if (txt)			{				if (txt.indexOf("<data>") == -1)				{					txt = "<data>"+txt+"</data>";				}				try				{					xml = new XML(txt);				}				catch (err:Error)				{					xml = null;					log.error(".source: XML parse failed: "+err.message, this);				}			}		}				/**		 * The data object to be parsed.		 */		override public function get data():Object		{			return xml;		}				/**		 * Frees all resources for garbage collection.		 */		override public function destroy():void		{			super.destroy();			xml = null;		}				/**		 * Fetches the tag name for this tokenizer.		 *  		 * @return The tag name. 		 */		override public function getTag():String		{			return xml.name().localName;		}				/**		 * Fetches the value associated with an attribute key.		 *  		 * @param key The attribute key.		 * 		 * @return The associated value. 		 */		override public function getAttribute(key:String):String		{			return xml.attribute(key).toString();		}				/**		 * Fetches the number of children belonging to this tokenizer.		 *  		 * @return The number of children. 		 */		override public function getNumChildren():int		{			return xml.children().length();		}				/**		 * Fetches an array of tokenizers where each is a child of this tokenizer.		 *  		 * @return The array of children tokenizers. 		 */		override public function getChildren():Array		{			var arr:Array = [];			if ( xml )			{				var children:XMLList = xml.children();				var i:int = 0;				for each (var child:Object in children)				{					arr[i++] = makeTokenizer(child as XML);				}			}			return arr;		}				/**		 * Creates a tokenizer instance and associates it with XML data.		 *  		 * @param xml The associated XML data.		 * 		 * @return The new instance. 		 */		private function makeTokenizer(xml:XML):ScriptTokenizer		{			var tokenizer:XMLScriptTokenizer = new XMLScriptTokenizer();			tokenizer.init(animVars, log);			tokenizer.xml = xml;			return tokenizer;		}			}}