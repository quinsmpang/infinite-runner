/* * Playdom, Inc. (c)2013 All Rights Reserved */ package common.util  { 	import common.interfaces.ISettings;	/**	 * A hashtable with convenience methods for settting and getting data.  	 * 	 * @author Rob Harris	 */	public class Hashtable extends Object implements ISettings	{		/** The object containing the configuration key / value pairs. */		public var configValues:Object;				public function Hashtable( configObj:Object=null )		{			reset( configObj );		}				public function reset( configObj:Object=null ):void		{			configValues = configObj != null ? configObj : {};		}				/**		 * Associates a key with an object.		 *		 * @param key  The key.		 * @param obj  The object.		 */		public function setObject(key:String, obj:Object):Object 		{			if (key) 			{				configValues[key] = obj;			}			return obj;		}				/**		 * Fetches an object associated with a key.		 *		 * @param key  The key.		 * @param def  The default value (optional).		 * @return  The associated object.		 */		public function getObject(key:String, def:Object=null):Object 		{			var val:Object = key ? configValues[key] : null;			return val ? val : def;		}				/**		 * Associates a key with a string value.		 *		 * @param key  The key.		 * @param val  The value.		 */		public function setString(key:String, val:String):String 		{			setObject(key, val);			return val;		}				/**		 * Fetches a string value associated with a key.		 *		 * @param key  The key.		 * @param def  The default value (optional).		 * @return  The associated value.		 */		public function getString(key:String, def:String=null):String 		{			var val:String = key ? configValues[key] : null;			return val ? val : def;		}   				/**		 * Associates a key with a boolean value.		 *		 * @param key  The property name.		 * @param val  The current value.		 * @update update  True if the associated component's value should be updated.		 */		public function setBoolean(key:String, val:Boolean):Boolean 		{			setObject(key, val ? "true" : "false");			return val;		}				/**		 * Fetches a boolean value associated with a key.		 *		 * @param key  The key.		 * @param def  The default value (optional).		 * @return  The associated value.		 */		public function getBoolean(key:String, def:Boolean=false):Boolean 		{			var val:String = key ? configValues[key] : null;			return val ? val == "true" : def;		}				/**		 * Associates a key with an integer value.		 *		 * @param key  The component's name.		 * @param val  The current value.		 * @update update  True if the associated component's value should be updated.		 */		public function setInt(key:String, val:int):int 		{			setObject(key, val.toString());			return val;		}				/**		 * Fetches an integer value associated with a key.		 *		 * @param key  The component's name.		 * @param def  The default value (optional).		 * @return  The component's current value.		 */		public function getInt(key:String, def:int=0):int 		{			var val:String = key ? configValues[key] : null;			if (val)			{				try				{					return parseInt(val);				}				catch (e:Error) {}			}			return def;		}				/**		 * Associates a key with a floating point value.		 *		 * @param key  The component's name.		 * @param val  The current value.		 * @update update  True if the associated component's value should be updated.		 */		public function setNumber(key:String, val:Number):Number 		{			setObject(key, val.toString());			return val;		}				/**		 * Fetches an floating point value associated with a key.		 *		 * @param key  The component's name.		 * @param def  The default value (optional).		 * @return  The component's current value.		 */		public function getNumber(key:String, def:Number=0):Number 		{			var val:String = key ? configValues[key] : null;			if (val)			{				try				{					return parseFloat(val);				}				catch (e:Error) {}			}			return def;		}				/**		 * Increments a numeric value associated with a key.		 *  		 * @param key  The key.		 * @param inc  The increment.		 */		public function incValue( key:String, inc:Number, min:Number=-999999 ):Number		{			return setNumber( key, Math.max( min, getNumber( key ) + inc ) );		}						/**		 * Returns a list of all the keys. 		 */		public function getKeys():Array		{			var list:Array = [];			for (var key:String in configValues) 
			{
				list.push( key );
			}			return list;
		}				public function removeItem( key:String ):void		{			delete configValues[ key ];		}				/**		 * Frees all resources for garbage collection. 		 */		public function destroy():void		{			configValues = null;		}				public function clone():Hashtable		{			var copy:Hashtable = new Hashtable();			for (var key:String in configValues) 			{				copy.configValues[ key ] = configValues[ key ];			}			return copy;		}	}}