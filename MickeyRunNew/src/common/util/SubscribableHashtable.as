/* * Playdom, Inc. (c)2013 All Rights Reserved */ package common.util  { 	import common.util.Hashtable;
 	import common.util.KeyDispatcher;

	/**	 * A subscribable hashtable.  	 * 	 * @author Rob Harris	 */	public class SubscribableHashtable extends Hashtable	{		/** The key event dispatcher */		public var dispatcher:KeyDispatcher;				/**		 * Creates an instance of this class. 		 */        public function SubscribableHashtable( name:String = "noname" )        {			this.dispatcher = new KeyDispatcher( name );        }		/**		 * Frees all resources for garbage collection. 		 */		override public function destroy():void		{			super.destroy();			dispatcher = null;		}				/**		 * Adds a listener to be notified when the value for a specific key changes.		 *		 * @param key       The key.		 * @param listener  The listener - will be passed the key and value.		 */		public function addKeyListener(key:String, listener:Function):void 		{			dispatcher.addKeyListener(key, listener);		}				/**		 * Removes a key listener.		 *		 * @param key       The key.		 * @param listener  The listener.		 */		public function removeKeyListener(key:String, listener:Function):void 		{			dispatcher.removeKeyListener(key, listener);		}		/**		 * Associates a key with an object and notifies any key listeners.		 *		 * @param key  The key.		 * @param obj  The object.		 */		override public function setObject(key:String, obj:Object):Object 		{			if (key) 			{				super.setObject(key, obj);				if (dispatcher)				{					dispatcher.dispatchKeyEvent(key, obj);				}			}			return obj;		}			}}